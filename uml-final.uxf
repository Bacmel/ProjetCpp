<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=12
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3270</x>
      <y>1250</y>
      <w>65</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum class&gt;&gt;
hex::Direction
--
NordOuest
Nord
NordEst
SudEst
Sud
SudOuest</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3005</x>
      <y>1250</y>
      <w>250</w>
      <h>265</h>
    </coordinates>
    <panel_attributes>hex::Coordonnees
--
#m_ligne: int
#m_colonne: int
--
_+direction(direction: hex::Direction): hex::Coordonnees_

+Coordonnees()
+Coordonnees(ligne: int, colonne: int)
+Coordonnees(ligne: float, colonne: float)
+Coordonnees(x: int, y: int, z: int)
+Coordonnees(x: float, y: float, z: float)

+translate(dir: hex::Direction, distance: int) const: hex::Coordonnees

+longueur() const: int
+distance(autre: const Coordonnees&amp;) const: int

+angle(autre: const Coordonnees&amp;) const: float
+direction(autre: const Coordonnees&amp;) const: hex::Direction

+tournerGauche(centre: const Coordonnees&amp;) const: hex::Coordonnees
+tournerDroite(centre: const Coordonnees&amp;) const: hex::Coordonnees
+tournerVers(centre: const hex::Coordonnees&amp;, cible: hex::Direction,
             initiale: hex::Direction) const: hex::Coordonnees

+operator+(autre: const hex::Coordonnees&amp;) const: hex::Coordonnees
+operator-() const: hex::Coordonnees
+operator-(autre: const Coordonnees&amp;) const: hex::Coordonnees
+operator*(scalaire: int) const: hex::Coordonnees

+operator==(autre: const Coordonnees&amp;) const: bool
+operator!=(autre: const Coordonnees&amp;) const: bool
+operator&gt;(autre: const Coordonnees&amp;) const: bool
+operator&gt;=(autre: const Coordonnees&amp;) const: bool
+operator&lt;(autre: const Coordonnees&amp;) const: bool
+operator&lt;=(autre: const Coordonnees&amp;) const: bool
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2245</x>
      <y>660</y>
      <w>235</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/hex::ICarte&lt;T&gt;/
--
/+operator()(c: const Coordonnees&amp;): T&amp;/
/+operator()(c: const Coordonnees&amp;) const: const T&amp;/

/+remplir(valeur: const T&amp;): void/
/+remplir(source: const ICarte&amp;, centre: const Coordonnees&amp;): void/
/+remplir(fournisseur: std::function&lt;T()&gt;): void/

/+iterateur(): std::shared_ptr&lt;IIterator&lt;Coordonnees&gt; &gt; /
style=autoresize
group=8</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2225</x>
      <y>775</y>
      <w>280</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>hex::CarteHexagone&lt;T&gt;
--
#m_rayon: size_t
#m_plateau: T**
--
+CarteHexagone(rayon: size_t)
+CarteHexagone(autre: const CarteHexagone&amp;)
+CarteHexagone(autre: CarteHexagone&amp;&amp;)
+operator=(autre: const CarteHexagone&amp;): CarteHexagone&amp;
+operator=(autre: CarteHexagone&amp;&amp;): CarteHexagone&amp;
+~CarteHexagone()


+operator()(c: const Coordonnees&amp;): T&amp;
+operator()(c: const Coordonnees&amp;) const: const T&amp;

+remplir(valeur: const T&amp;): void
+remplir(source: const ICarte&amp;, centre: const Coordonnees&amp;): void
+remplir(fournisseur: std::function&lt;T()&gt;): void

+iterateur(): std::shared_ptr&lt;IIterator&lt;Coordonnees&gt; &gt;

#deletePlateau(): void
group=8</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2360</x>
      <y>740</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2715</x>
      <y>1275</y>
      <w>210</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>hex::Masque
--
_+contour(): Masque_

+Masque()
+Masque(rayon: size_t)
+Masque(autre: const Masque&amp;)
+Masque(autre: Masque&amp;&amp;)
+operator=(autre: const Masque&amp;): Masque&amp;
+operator=(autre: Masque&amp;&amp;): Masque&amp;
+~Masque()

+deplacer(vecteur: const Coordonnees&amp;) const: Masque

+operator()(c: const Coordonnees&amp;) const: bool

+tournerGauche(centre: const Coordonnees&amp;) const: Masque
+tournerDroite(centre: const Coordonnees&amp;) const: Masque
+tournerVers(centre: const Coordonnees&amp;, cible: Direction,
             initiale: Direction) const: Masque

+operator||(autre: const Masque&amp;) const: Masque
+operator&amp;&amp;(autre: const Masque&amp;) const: Masque

+operator+(autre: const Coordonnees&amp;) const: Masque
+operator-(autre: const Coordonnees&amp;) const: Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2800</x>
      <y>1225</y>
      <w>115</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>std::set&lt;T&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2825</x>
      <y>1235</y>
      <w>80</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
m2=T = hex::Coordonnee</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2925</x>
      <y>1305</y>
      <w>90</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2275</x>
      <y>970</y>
      <w>265</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/obj::IObjet/
--
/+estUtilisable() const: bool/
/+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;, /
/              cible: const hex::Coordonnees&amp;)/

/+accepter(visiteur: IObjetVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2490</x>
      <y>345</y>
      <w>80</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/utils::IActualisable/
--
/+actualiser(): void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2520</x>
      <y>370</y>
      <w>15</w>
      <h>610</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;1200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2530</x>
      <y>535</y>
      <w>230</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/utils::IPorte/
--
/+getPorte() const: hex::Masque/
/+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2540</x>
      <y>570</y>
      <w>15</w>
      <h>410</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;800.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2410</x>
      <y>1080</y>
      <w>265</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>obj::GravityGun
--
-m_distance: size_t
-m_aire: hex::Masque
-m_charge: utils::Jauge
--
+GravityGun()
+GravityGun(distance: size_t, aire: hex::Masque, timeMax: size_t)

+estUtilisable() const: bool
+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;,
              cible: const hex::Coordonnees&amp;)
+accepter(visiteur: IObjetVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2465</x>
      <y>1030</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2125</x>
      <y>1080</y>
      <w>265</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>obj::Taser
--
-m_degat: size_t
--
+Taser()

+estUtilisable() const: bool
+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;,
              cible: const hex::Coordonnees&amp;)
+accepter(visiteur: IObjetVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2380</x>
      <y>1030</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3005</x>
      <y>1080</y>
      <w>135</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>utils::Jauge
--
-m_valMax: size_t
-m_val: size_t
--
+Jauge(valMax: size_t)

+getVal() const: size_t
+getValMax() const: size_t

+ajouterValeur(valeur: int): void
+ajouterValeurMax(valeur: int): void

+remplir(): void
+vider(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2680</x>
      <y>1085</y>
      <w>335</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;650.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2715</x>
      <y>625</y>
      <w>255</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>/per::APersonnage/
--
_#idSuivante: size_t_

#m_pv: utils::Jauge
#m_position: hex::Coordonnees
#m_id: size_t const
#m_zoneEffet: std::map&lt;hex::Coordonnees, size_t&gt;
--
+APersonnage(pvMax: size_t, position: hex::Coordonnees)

+getSante() const: size_t
+getSanteMax() const: size_t
+getId() const: size_t
+getPosition() const: hex::Coordonnees
+getZoneEffet() const: std::map&lt;hex::Coordonnees, size_t&gt;

+estVivant() const: bool
+subirAttaque(degat: size_t): void
+ajouterSante(sante: int): void
+ajouterSanteMax(sante: int): void
+tuer(): void

+deplacer(deplacement: per::Deplacement, cible: hex::Coordonnees): void

+ajouterObjet(objet: obj::IObjet_S): void
+retirerObjet(objet: obj::IObjet_S): void
+tailleSac() const: size_t
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S

/+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2755</x>
      <y>570</y>
      <w>15</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2610</x>
      <y>890</y>
      <w>230</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>per::Fantassin
--
-m_arme: obj::IObjet_S
--
+Fantassin()

+tailleSac() const: size_t
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S
+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2775</x>
      <y>850</y>
      <w>15</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2545</x>
      <y>970</y>
      <w>75</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2855</x>
      <y>890</y>
      <w>230</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>per::Heros
--
-m_sac: std::vector&lt;obj::IObjet_S&gt;
--
+Heros(pvMax: size_t)

+tailleSac() const: size_t
+ajouterObjet(objet: obj::IObjet_S): void
+retirerObjet(objet: obj::IObjet_S): void
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S
+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2950</x>
      <y>850</y>
      <w>15</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2545</x>
      <y>1000</y>
      <w>320</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>620.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2985</x>
      <y>625</y>
      <w>65</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum class&gt;&gt;
per::Deplacement
--
Marcher
Sauter
Forcer
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1850</x>
      <y>410</y>
      <w>255</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/donjon::IDonjon/
--
/+invoquer(personnage: per::APersonnage_S, /
/          position: const hex::Coordonnees&amp;): void/
/+deplace(personnage: per::APersonnage&amp;, type: per::Deplacement, /
/               position: const hex::Coordonnees&amp;): void/
/+pousse(aoe: const std::map&lt;hex::Coordonnees, hex::Direction&gt;&amp;, /
/         distance: size_t): void/
/+degat(aoe: const std::map&lt;hex::Coordonnees, size_t&gt;&amp;): void/
/+deposer(objet: obj::IObjet_S, position: const hex::Coordonnees&amp;): void/
/+ramasser(position: const hex::Coordonnees&amp;): obj::IObjet_S/

/+getCaseVide() const: std::vector&lt;hex::Coordonnees&gt;/
/+getNbPersonnages() const: size_t/
/+getPersonnage(indice: size_t) const: per::APersonnage_SC/
/+getPersonnage(indice: size_t): per::APersonnage_S/
/+getPersonnageParId(id: size_t) const: per::APersonnage_SC/
/+getPersonnageParId(id: size_t): per::APersonnage_S/
/+getCarte(): hex::ICarte_S&lt;cases::ICase_S&gt;/
/+trouver(position: const hex::Coordonnees&amp;) const: per::APersonnage_SC/
/+trouver(position: const hex::Coordonnees&amp;): per::APersonnage_S/
/+estOccupee(position: const hex::Coordonnees&amp;) const: bool/
style=autoresize
group=11</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2100</x>
      <y>370</y>
      <w>415</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>810.0;10.0;810.0;50.0;10.0;50.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1845</x>
      <y>610</y>
      <w>265</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>donjon::Donjon
--
m_personnages: std::vector&lt;per::APersonnage_S&gt;
m_carte: hex::ICarte_S&lt;cases::ACase_S&gt;
--
+invoquer(personnage: per::APersonnage_S,
          position: const hex::Coordonnees&amp;): void
+deplace(personnage: per::APersonnage&amp;, type: per::Deplacement,
               position: const hex::Coordonnees&amp;): void
+pousse(aoe: const std::map&lt;hex::Coordonnees, hex::Direction&gt;&amp;,
         distance: size_t): void
+degat(aoe: const std::map&lt;hex::Coordonnees, size_t&gt;&amp;): void
+deposer(objet: obj::IObjet_S, position: const hex::Coordonnees&amp;): void
+ramasser(position: const hex::Coordonnees&amp;): obj::IObjet_S

+getCaseVide() const: std::vector&lt;hex::Coordonnees&gt;
+getNbPersonnages() const: size_t
+getPersonnage(indice: size_t) const: per::APersonnage_SC
+getPersonnage(indice: size_t): per::APersonnage_S
+getPersonnageParId(id: size_t) const: per::APersonnage_SC
+getPersonnageParId(id: size_t): per::APersonnage_S
+getCarte(): hex::ICarte_S&lt;cases::ICase_S&gt;
+trouver(position: const hex::Coordonnees&amp;) const: per::APersonnage_SC
+trouver(position: const hex::Coordonnees&amp;): per::APersonnage_S
+estOccupee(position: const hex::Coordonnees&amp;) const: bool

+actualiser(): void

-pousse(personnage: const per::APersonnage_S&amp;, direction: hex::Direction,
        distance: size_t): void
style=autoresize
      
group=11</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1975</x>
      <y>575</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3105</x>
      <y>530</y>
      <w>180</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>/donjon::cases::ACase/
--
/+getObjet(): obj::IObjet_S/
/+getObjet() const: const obj::IObjet_SC/
/+estPraticable() const: bool/
/+estTransparent() const: bool/

/+deposer(objet: obj::IObjet_S): void/
/+ramasser(): obj::IObjet_S/
/+aObjet() const: bool/

/+enEntree(personnage: per::APersonnage&amp;): void/
/+enActivation(personnage: per::APersonnage&amp;): void/

/+accepter(visiteur: ICaseVisiteur&amp;) const: void/

+actualiser(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3010</x>
      <y>680</y>
      <w>180</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>donjon::cases::Sol
--
-m_objet: obj::IObjet_S
--
+Sol()

+getObjet(): obj::IObjet_S
+getObjet() const: const obj::IObjet_SC
+estPraticable() const: bool
+estTransparent() const: bool

+deposer(objet: obj::IObjet_S): void
+ramasser(): obj::IObjet_S
+aObjet() const: bool

+enEntree(personnage: per::APersonnage&amp;): void
+enActivation(personnage: per::APersonnage&amp;): void

+accepter(visiteur: ICaseVisiteur&amp;) const: void

+actualiser(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3125</x>
      <y>650</y>
      <w>15</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2550</x>
      <y>370</y>
      <w>580</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;290.0;1140.0;290.0;1140.0;320.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2110</x>
      <y>630</y>
      <w>615</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;1210.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3205</x>
      <y>680</y>
      <w>180</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>donjon::cases::Trou
--
+Trou()

+getObjet(): obj::IObjet_S
+getObjet() const: const obj::IObjet_SC
+estPraticable() const: bool
+estTransparent() const: bool

+deposer(objet: obj::IObjet_S): void
+ramasser(): obj::IObjet_S
+aObjet() const: bool

+enEntree(personnage: per::APersonnage&amp;): void
+enActivation(personnage: per::APersonnage&amp;): void

+accepter(visiteur: ICaseVisiteur&amp;) const: void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3260</x>
      <y>650</y>
      <w>15</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1470</x>
      <y>830</y>
      <w>215</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>partie::Equipe
--
-m_membres: std::vector&lt;per::APersonnage_S&gt;
-m_strategie: strat::IStrategie_S
--
+Equipe(strategie: strat::IStrategie_S&amp;)

+ajouterMembre(personnage: per::APersonnage_S): void
+retirerMembre(personnage: per::APersonnage_SC): void
+estMembre(idPersonnage: size_t) const: bool
+estMembre(personnage: const per::APersonnage&amp;) const: bool
+compterSurvivant() const: size_t
+jouer(partie: partie::Partie&amp;): void
+retirerMorts(): void

+compterMembres() const: size_t
+getMembre(indice: size_t) const: per::APersonnage_SC
+getMembre(indice: size_t): per::APersonnage_S
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1145</x>
      <y>795</y>
      <w>260</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>partie::Partie
--
-m_equipes: std::vector&lt;Equipe&gt;
-m_donjon: donjon::IDonjon_S
-m_etat: etat::IEtat_S
-m_etatP: etat::IEtat_S
--
+Partie(strategie: strat::IStrategie_S&amp;)

+getEquipe(indice: size_t) const: const Equipe&amp;
+getEquipe(indice: size_t): Equipe&amp;
+getEquipes(): std::vector&lt;Equipe&gt;&amp;
+getDonjon() const: donjon::IDonjon_SC
+getDonjon(): donjon::IDonjon_S
+getEtat() const: etat::IEtat_SC
+setEtat(etat: etat::IEtat_S): void
+getEtatPre() const: etat::IEtat_SC
+getEquipeCourante() const: size_t
+getPersoSelect(): per::APersonnage_S
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+genererEquipe(strategie: strat::IStrategie_S&amp;): size_t
+genererPersonnage(personnage: per::APersonnage_S, indice: size_t): void
+genererObjet(objet: obj::IObjet_S): void
+demander(): void
+demander(indiceObjet: size_t): void
+demander(coordonnees: hex::Coordonnees): void
+coordonneesLibre(): hex::Coordonnees

-genererCarte(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1740</x>
      <y>840</y>
      <w>255</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/partie::strat::IStrategie/
--
/+mettreEnOeuvre(partie: partie::Partie&amp;, equipe: partie::Equipe&amp;): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1740</x>
      <y>895</y>
      <w>255</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>partie::strat::JoueurHumain
--
+JoueurHumain()

+mettreEnOeuvre(partie: partie::Partie&amp;, equipe: partie::Equipe&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1870</x>
      <y>870</y>
      <w>15</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1470</x>
      <y>970</y>
      <w>255</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/partie::etat::IEtat/
--
/+getEquipeCourante() const: size_t/
/+getPersoSelect() const: per::APersonnage_SC/
/+getObjetSelect() const: obj::IObjet_SC/

/+afficher() const: void/

/+operation(partie: Partie&amp;): void/
/+operation(partie: Partie&amp;, indiceObjet: size_t): void/
/+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1410</x>
      <y>830</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1685</x>
      <y>845</y>
      <w>65</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1410</x>
      <y>975</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..2
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1225</x>
      <y>1080</y>
      <w>255</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>partie::etat::Decision
--
-m_indiceEquipe: size_t
--
+Decision(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1465</x>
      <y>1055</y>
      <w>25</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1715</x>
      <y>1080</y>
      <w>255</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>partie::etat::FinPartie
--
-m_indiceGagnant: size_t
--
+Decision(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1700</x>
      <y>1055</y>
      <w>45</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1695</x>
      <y>1195</y>
      <w>255</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>partie::etat::FinTour
--
-m_indiceEquipe: size_t
--
+FinTour(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1670</x>
      <y>1055</y>
      <w>45</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;280.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1280</x>
      <y>1310</y>
      <w>255</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>partie::etat::SelectionMan
--
-m_indiceEquipe: size_t
--
+SelectionMan(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1475</x>
      <y>1440</y>
      <w>255</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>partie::etat::ObjetActif
--
-m_equipe: size_t
-m_personnage: per::APersonnage_S
-m_objet: obj::IObjet_S
--
+ObjetActif(equipe: size_t, personnage: per::APersonnage_S,
            objet: obj::IObjet_S)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1670</x>
      <y>1310</y>
      <w>255</w>
      <h>115</h>
    </coordinates>
    <panel_attributes>partie::etat::PersoActif
--
-m_indiceEquipe: size_t
-m_personnage: per::APersonnage_S
--
+PersoActif(indice: size_t, personnage: per::APersonnage_S)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1250</x>
      <y>1195</y>
      <w>255</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>partie::etat::SelectionAuto
--
-m_equipe: size_t
--
+SelectionAuto(indice: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>275</x>
      <y>0</y>
      <w>235</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
controlleur::IControlleur
--
/+enEvenement(source: const vue::Fenetre&amp;, even: sf::Event&amp;): void/
style=autoresize
group=14</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>270</x>
      <y>65</y>
      <w>295</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>controlleur::PartieCont
--
-m_dessinable: const vue::PartieDessinable*
-m_partie: partie::Partie*
-m_convertisseur: utils::HexPixelConvertisseur
--
+PartieCont(dessinable: const vue::PartieDessinable&amp;, partie: partie::Partie&amp;)

+enEvenement(source: const vue::Fenetre&amp;, even: sf::Event&amp;): void
#clicObjet(coordonneesClic: const sf::Vector2f&amp;): bool
#clicCase(coordonneesClic: const sf::Vector2f&amp;, source: const vue::Fenetre&amp;): void
style=autoresize
group=14</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>420</x>
      <y>30</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1420</x>
      <y>135</y>
      <w>195</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>vue::ADessinable&lt;T&gt;
--
-m_cote: float
-m_element: std::shared_ptr&lt;T&gt;
--
+ADessinable(cote: float)
+ADessinable(cote: float, element: std::shared_ptr&lt;T&gt;)

+getCote() const: float
+getElement(): std::shared_ptr&lt;T&gt;
+getElement() const: std::shared_ptr&lt;const T&gt;

+setCote(cote: float): void
+setElement(element: std::shared_ptr&lt;T&gt;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1420</x>
      <y>95</y>
      <w>50</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>/sf::Drawable/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1495</x>
      <y>95</y>
      <w>70</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>/sf::Transformable/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1440</x>
      <y>105</y>
      <w>15</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1525</x>
      <y>105</y>
      <w>15</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1295</x>
      <y>390</y>
      <w>245</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>vue::CaseDessinable
--
-m_hexagone: sf::CircleShape
-m_textureSol: Texture_S
-m_textureTrou: Texture_S
-m_objDessinable: ObjetDessinable
--
+CaseDessinable(cote: float)
+CaseDessinable(cote: float, element: donjon::cases::ACase_S)

+surligner(): void

+visiter(gravityGun: const obj::GravityGun&amp;): void
+visiter(taser: const obj::Taser&amp;): void

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void

+setCote(cote: float): void
+setElement(element: donjon::cases::ACase_S): void

-preparer(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1615</x>
      <y>265</y>
      <w>180</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/obj::IObjetVisiteur/
--
/+visiter(gravityGun: const obj::GravityGun&amp;): void/
/+visiter(taser: const obj::Taser&amp;): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1380</x>
      <y>365</y>
      <w>15</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1530</x>
      <y>230</y>
      <w>15</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;320.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1375</x>
      <y>330</y>
      <w>120</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/donjon::cases::ICaseVisiteur/
--
/+visite(sol: const Sol&amp;): void/
/+visite(trou: const Trou&amp;): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1555</x>
      <y>325</y>
      <w>245</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>vue::ObjetDessinable
--
-m_cote: float
-m_sprite: sf::Sprite
-m_textureGravityGun: Texture_S
-m_textureTaser: Texture_S
--
+ObjetDessinable(cote; float, iObjet: const obj::IObjet*)

+getCote() const: float

+setElement(iObjet: obj::IObjet_S ): void
+setCote(cote: float): void
+setObjet(iobjet: const obj::IObjet&amp;): void

+surligner(): void

+visiter(gravityGun: const obj::GravityGun&amp;): void
+visiter(taser: const obj::Taser&amp;): void

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1635</x>
      <y>300</y>
      <w>15</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>610</x>
      <y>330</y>
      <w>290</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>vue::PartieDessinable
--
-m_convertisseur: utils::HexPixelConvertisseur
-m_font: sf::Font
-m_equipeText: sf::Text
-m_equipeIndicateur: sf::RectangleShape
--
+PartieDessinable(cote: float)
+PartieDessinable(cote: float, partie: partie::Partie&amp;)

+getCote() const: float
+getObjet() const: const obj::IObjet*

+setCote(cote: float): void
+setElement(element: partie::Partie&amp;): void

+getCaseInventaire(indice: size_t) const: sf::FloatRect

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void

-drawCarte(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;,
           donjon: donjon::IDonjon&amp;) const: void
-drawPersonnages(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;,
                 donjon: donjon::IDonjon&amp;) const: void
-drawEquipe(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;) const: void
-drawInventaire(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;) const: void
-drawGagnant(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;) const: void
-couleurEquipe(equipe: size_t) const: sf::Color
-depuisHSV(hue: int, saturation: float, value: float) const: sf::Color
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>895</x>
      <y>230</y>
      <w>545</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>1070.0;10.0;1070.0;60.0;10.0;60.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1035</x>
      <y>155</y>
      <w>215</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>vue::TextureGest
--
-m_textures: std::map&lt;std::string, Texture_S&gt;
--
_+getInstance(): TextureGest&amp;_

-TextureGest()
+TextureGest(const TextureGest&amp; autre) {delete}
+operator=(const TextureGest&amp; autre): TextureGest&amp; [delete]

+obtenir(chemin: const std::string&amp;): Texture_S
+retirer(chemin: const std::string&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1035</x>
      <y>0</y>
      <w>300</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>vue::Fenetre
--
-m_fenetre: sf::RenderWindow
-m_gestEven: std::map&lt;sf::Event::EventType, std::list&lt;controlleur::IControlleur_S&gt; &gt;
-m_dessinable: std::shared_ptr&lt;sf::Drawable&gt;
--
+Fenetre(videoMode: sf::VideoMode&amp;, titre: std::string)

+getRenderWindow(): sf::RenderWindow&amp;
+getRenderWindow() const: const sf::RenderWindow&amp;

+actualiser(): void
+actualiserUneFois(): void

+attacher(type: sf::Event::EventType, evenGest: controlleur::IControlleur_S): void
+detacher(type: sf::Event::EventType, evenGest: controlleur::IControlleur_S): void

+setDessinateur(dessinateur: std::shared_ptr&lt;sf::Drawable&gt;): void

#notifier(even: sf::Event&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>945</x>
      <y>340</y>
      <w>160</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/per::IPersonnageVisiteur/
--
/+visiter(heros: const Heros&amp;): void/
/+visiter(fantassin: const Fantassin&amp;): void/
style=autoresize
group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>945</x>
      <y>410</y>
      <w>245</w>
      <h>195</h>
    </coordinates>
    <panel_attributes>vue::PersonnageDessinable
--
-m_margin: float
-m_couleur: sf::Color
-m_sprite: sf::Sprite
-m_barFond: sf::RectangleShape
-m_barValeur: sf::RectangleShape
-m_herosTex: Texture_S
-m_fantassinTex: Texture_S
--
+PersonnageDessinable(cote: float);
+PersonnageDessinable(cote: float, aPersonnage: per::APersonnage_S)

+getCouleur() const: sf::Color
+setCouleur(couleur: const sf::Color&amp;): void

+setCote(cote: float): void
+setElement(aPersonnage: per::APersonnage_S): void

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void

+visiter(heros: const Heros&amp;): void
+visiter(fantassin: const Fantassin&amp;): void
+actualiser(info: const per::APersonnage&amp;): void

-preparerBarreSante(personnage: const per::APersonnage&amp;)
-preparer(): void
style=autoresize
group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1135</x>
      <y>230</y>
      <w>315</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>610.0;10.0;610.0;100.0;10.0;100.0;10.0;360.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1010</x>
      <y>375</y>
      <w>15</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>290</y>
      <w>215</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Roblite
--
-m_partie: std::shared_ptr&lt;partie::Partie&gt;
-m_fenetre: std::shared_ptr&lt;vue::Fenetre&gt;
-m_partieDessinable: std::shared_ptr&lt;vue::PartieDessinable&gt;
-m_controlleur: controlleur::IControlleur_S
--
+Roblite()

+jouer(): void
+preparerPartie(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1340</x>
      <y>100</y>
      <w>90</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>5</y>
      <w>535</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=*</panel_attributes>
    <additional_attributes>1050.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>215</x>
      <y>130</y>
      <w>830</w>
      <h>205</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;380.0;1270.0;380.0;1270.0;10.0;1640.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2110</x>
      <y>665</y>
      <w>145</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2530</x>
      <y>370</y>
      <w>330</w>
      <h>265</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;310.0;640.0;310.0;640.0;510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2975</x>
      <y>840</y>
      <w>165</w>
      <h>250</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;300.0;10.0;300.0;480.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2680</x>
      <y>1175</y>
      <w>115</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;10.0;200.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2975</x>
      <y>830</y>
      <w>200</w>
      <h>430</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;370.0;10.0;370.0;840.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>650</x>
      <y>65</y>
      <w>275</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>utils::HexPixelConvertisseur
--
+HexPixelConvertisseur()

+operator()(cote: float, hex: const hex::Coordonnees&amp;) const: sf::Vector2f
+operator()(cote: float, pixel: const sf::Vector2i&amp;) const: hex::Coordonnees
style=autoresize
group=14</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>70</y>
      <w>90</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1965</x>
      <y>940</y>
      <w>200</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>hex::IterateurCarteHexagone&lt;T&gt;
--
-m_carte: const CarteHexagone&lt;T&gt;*
-m_colonne: int
-m_ligne: int
-m_colonneMax: int
--
+IterateurCarteHexagone(carte: const CarteHexagone&lt;T&gt;*)
+aSuite(): bool
+suite(): Coordonnees
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2075</x>
      <y>855</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/hex::IIterateur&lt;T&gt;/
--
/+aSuite(): bool/
/+suite(): Coordonnees/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2115</x>
      <y>890</y>
      <w>15</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1520</x>
      <y>1055</y>
      <w>55</w>
      <h>265</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1635</x>
      <y>1055</y>
      <w>55</w>
      <h>265</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1595</x>
      <y>1055</y>
      <w>15</w>
      <h>395</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;770.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1495</x>
      <y>1055</y>
      <w>45</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;280.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1410</x>
      <y>800</y>
      <w>445</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;870.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>215</x>
      <y>330</y>
      <w>405</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;790.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>215</x>
      <y>345</y>
      <w>940</w>
      <h>490</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0;60.0;950.0;1860.0;950.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>215</x>
      <y>65</y>
      <w>65</w>
      <h>255</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;480.0;60.0;480.0;60.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1805</x>
      <y>330</y>
      <w>120</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1915</x>
      <y>325</y>
      <w>265</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/obj::IObjet/
--
/+estUtilisable() const: bool/
/+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;, /
/              cible: const hex::Coordonnees&amp;)/

/+accepter(visiteur: IObjetVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1610</x>
      <y>525</y>
      <w>180</w>
      <h>125</h>
    </coordinates>
    <panel_attributes>/donjon::cases::ACase/
--
/+getObjet(): obj::IObjet_S/
/+getObjet() const: const obj::IObjet_SC/
/+estPraticable() const: bool/
/+estTransparent() const: bool/

/+deposer(objet: obj::IObjet_S): void/
/+ramasser(): obj::IObjet_S/
/+aObjet() const: bool/

/+enEntree(personnage: per::APersonnage&amp;): void/
/+enActivation(personnage: per::APersonnage&amp;): void/

/+accepter(visiteur: ICaseVisiteur&amp;) const: void/

+actualiser(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1545</x>
      <y>525</y>
      <w>75</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1260</x>
      <y>555</y>
      <w>255</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>/per::APersonnage/
--
_#idSuivante: size_t_

#m_pv: utils::Jauge
#m_position: hex::Coordonnees
#m_id: size_t const
#m_zoneEffet: std::map&lt;hex::Coordonnees, size_t&gt;
--
+APersonnage(pvMax: size_t, position: hex::Coordonnees)

+getSante() const: size_t
+getSanteMax() const: size_t
+getId() const: size_t
+getPosition() const: hex::Coordonnees
+getZoneEffet() const: std::map&lt;hex::Coordonnees, size_t&gt;

+estVivant() const: bool
+subirAttaque(degat: size_t): void
+ajouterSante(sante: int): void
+ajouterSanteMax(sante: int): void
+tuer(): void

+deplacer(deplacement: per::Deplacement, cible: hex::Coordonnees): void

+ajouterObjet(objet: obj::IObjet_S): void
+retirerObjet(objet: obj::IObjet_S): void
+tailleSac() const: size_t
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S

/+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1195</x>
      <y>560</y>
      <w>75</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>905</x>
      <y>520</y>
      <w>250</w>
      <h>295</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0;60.0;560.0;480.0;560.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>130</y>
      <w>585</w>
      <h>695</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0;40.0;1350.0;1150.0;1360.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2545</x>
      <y>805</y>
      <w>685</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>1310.0;10.0;1350.0;10.0;1350.0;430.0;10.0;430.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2165</x>
      <y>940</y>
      <w>70</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1685</x>
      <y>640</y>
      <w>1040</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;390.0;980.0;390.0;980.0;10.0;2060.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1930</x>
      <y>650</y>
      <w>795</w>
      <h>680</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;1330.0;160.0;1330.0;160.0;730.0;500.0;730.0;500.0;620.0;1160.0;620.0;1160.0;10.0;1570.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1735</x>
      <y>660</y>
      <w>990</w>
      <h>805</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;1580.0;560.0;1580.0;560.0;720.0;900.0;720.0;900.0;610.0;1560.0;610.0;1560.0;10.0;1960.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1735</x>
      <y>970</y>
      <w>550</w>
      <h>505</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;980.0;580.0;980.0;580.0;120.0;920.0;120.0;920.0;10.0;1080.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1555</x>
      <y>230</y>
      <w>15</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;190.0</additional_attributes>
  </element>
</diagram>
