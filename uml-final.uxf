<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=12
// fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>4</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2716</x>
      <y>1000</y>
      <w>52</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum class&gt;&gt;
hex::Direction
--
NordOuest
Nord
NordEst
SudEst
Sud
SudOuest</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2504</x>
      <y>1000</y>
      <w>208</w>
      <h>212</h>
    </coordinates>
    <panel_attributes>hex::Coordonnees
--
#m_ligne: int
#m_colonne: int
--
_+direction(direction: hex::Direction): hex::Coordonnees_

+Coordonnees()
+Coordonnees(ligne: int, colonne: int)
+Coordonnees(ligne: float, colonne: float)
+Coordonnees(x: int, y: int, z: int)
+Coordonnees(x: float, y: float, z: float)

+translate(dir: hex::Direction, distance: int) const: hex::Coordonnees

+longueur() const: int
+distance(autre: const Coordonnees&amp;) const: int

+angle(autre: const Coordonnees&amp;) const: float
+direction(autre: const Coordonnees&amp;) const: hex::Direction

+tournerGauche(centre: const Coordonnees&amp;) const: hex::Coordonnees
+tournerDroite(centre: const Coordonnees&amp;) const: hex::Coordonnees
+tournerVers(centre: const hex::Coordonnees&amp;, cible: hex::Direction,
             initiale: hex::Direction) const: hex::Coordonnees

+operator+(autre: const hex::Coordonnees&amp;) const: hex::Coordonnees
+operator-() const: hex::Coordonnees
+operator-(autre: const Coordonnees&amp;) const: hex::Coordonnees
+operator*(scalaire: int) const: hex::Coordonnees

+operator==(autre: const Coordonnees&amp;) const: bool
+operator!=(autre: const Coordonnees&amp;) const: bool
+operator&gt;(autre: const Coordonnees&amp;) const: bool
+operator&gt;=(autre: const Coordonnees&amp;) const: bool
+operator&lt;(autre: const Coordonnees&amp;) const: bool
+operator&lt;=(autre: const Coordonnees&amp;) const: bool
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1896</x>
      <y>528</y>
      <w>192</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/hex::ICarte&lt;T&gt;/
--
/+operator()(c: const Coordonnees&amp;): T&amp;/
/+operator()(c: const Coordonnees&amp;) const: const T&amp;/

/+remplir(valeur: const T&amp;): void/
/+remplir(source: const ICarte&amp;, centre: const Coordonnees&amp;): void/
/+remplir(fournisseur: std::function&lt;T()&gt;): void/

/+iterateur(): std::shared_ptr&lt;IIterator&lt;Coordonnees&gt; &gt; /
style=autoresize
group=8</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1880</x>
      <y>620</y>
      <w>224</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>hex::CarteHexagone&lt;T&gt;
--
#m_rayon: size_t
#m_plateau: T**
--
+CarteHexagone(rayon: size_t)
+CarteHexagone(autre: const CarteHexagone&amp;)
+CarteHexagone(autre: CarteHexagone&amp;&amp;)
+operator=(autre: const CarteHexagone&amp;): CarteHexagone&amp;
+operator=(autre: CarteHexagone&amp;&amp;): CarteHexagone&amp;
+~CarteHexagone()


+operator()(c: const Coordonnees&amp;): T&amp;
+operator()(c: const Coordonnees&amp;) const: const T&amp;

+remplir(valeur: const T&amp;): void
+remplir(source: const ICarte&amp;, centre: const Coordonnees&amp;): void
+remplir(fournisseur: std::function&lt;T()&gt;): void

+iterateur(): std::shared_ptr&lt;IIterator&lt;Coordonnees&gt; &gt;

#deletePlateau(): void
group=8</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1988</x>
      <y>592</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2272</x>
      <y>1020</y>
      <w>172</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>hex::Masque
--
_+contour(): Masque_

+Masque()
+Masque(rayon: size_t)
+Masque(autre: const Masque&amp;)
+Masque(autre: Masque&amp;&amp;)
+operator=(autre: const Masque&amp;): Masque&amp;
+operator=(autre: Masque&amp;&amp;): Masque&amp;
+~Masque()

+deplacer(vecteur: const Coordonnees&amp;) const: Masque

+operator()(c: const Coordonnees&amp;) const: bool

+tournerGauche(centre: const Coordonnees&amp;) const: Masque
+tournerDroite(centre: const Coordonnees&amp;) const: Masque
+tournerVers(centre: const Coordonnees&amp;, cible: Direction,
             initiale: Direction) const: Masque

+operator||(autre: const Masque&amp;) const: Masque
+operator&amp;&amp;(autre: const Masque&amp;) const: Masque

+operator+(autre: const Coordonnees&amp;) const: Masque
+operator-(autre: const Coordonnees&amp;) const: Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2340</x>
      <y>980</y>
      <w>92</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>std::set&lt;T&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2360</x>
      <y>988</y>
      <w>68</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
m2=T = hex::Coordonnee</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2440</x>
      <y>1044</y>
      <w>72</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1920</x>
      <y>776</y>
      <w>220</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/obj::IObjet/
--
/+estUtilisable() const: bool/
/+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;, /
/              cible: const hex::Coordonnees&amp;)/

/+accepter(visiteur: IObjetVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2092</x>
      <y>276</y>
      <w>64</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/utils::IActualisable/
--
/+actualiser(): void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2116</x>
      <y>296</y>
      <w>12</w>
      <h>488</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;1200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2124</x>
      <y>428</y>
      <w>192</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/utils::IPorte/
--
/+getPorte() const: hex::Masque/
/+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2132</x>
      <y>456</y>
      <w>12</w>
      <h>328</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;800.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2028</x>
      <y>864</y>
      <w>220</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>obj::GravityGun
--
-m_distance: size_t
-m_aire: hex::Masque
-m_charge: utils::Jauge
--
+GravityGun()
+GravityGun(distance: size_t, aire: hex::Masque, timeMax: size_t)

+estUtilisable() const: bool
+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;,
              cible: const hex::Coordonnees&amp;)
+accepter(visiteur: IObjetVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2072</x>
      <y>824</y>
      <w>12</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1800</x>
      <y>864</y>
      <w>220</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>obj::Taser
--
-m_degat: size_t
--
+Taser()

+estUtilisable() const: bool
+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;,
              cible: const hex::Coordonnees&amp;)
+accepter(visiteur: IObjetVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2004</x>
      <y>824</y>
      <w>12</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2504</x>
      <y>864</y>
      <w>112</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>utils::Jauge
--
-m_valMax: size_t
-m_val: size_t
--
+Jauge(valMax: size_t)

+getVal() const: size_t
+getValMax() const: size_t

+ajouterValeur(valeur: int): void
+ajouterValeurMax(valeur: int): void

+remplir(): void
+vider(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2244</x>
      <y>868</y>
      <w>268</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;650.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2468</x>
      <y>332</y>
      <w>160</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>/utils::AObservable&lt;T&gt;/
--
-m_observateurs: std::list&lt;utils::IObservateur&lt;T&gt;*&gt;
--
+AObservable()

+attacher(observateur: utils::IObservateur&lt;T&gt;*): void
+detacher(observateur: utils::IObservateur&lt;T&gt;*): void
+notifier(const T&amp; info) const: void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2272</x>
      <y>500</y>
      <w>212</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>/per::APersonnage/
--
_#idSuivante: size_t_

#m_pv: utils::Jauge
#m_position: hex::Coordonnees
#m_id: size_t const
#m_zoneEffet: std::map&lt;hex::Coordonnees, size_t&gt;
--
+APersonnage(pvMax: size_t, position: hex::Coordonnees)

+getSante() const: size_t
+getSanteMax() const: size_t
+getId() const: size_t
+getPosition() const: hex::Coordonnees
+getZoneEffet() const: std::map&lt;hex::Coordonnees, size_t&gt;

+estVivant() const: bool
+subirAttaque(degat: size_t): void
+ajouterSante(sante: int): void
+ajouterSanteMax(sante: int): void
+tuer(): void

+deplacer(deplacement: per::Deplacement, cible: hex::Coordonnees): void

+ajouterObjet(objet: obj::IObjet_S): void
+retirerObjet(objet: obj::IObjet_S): void
+tailleSac() const: size_t
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S

/+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2304</x>
      <y>456</y>
      <w>12</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2188</x>
      <y>712</y>
      <w>192</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>per::Fantassin
--
-m_arme: obj::IObjet_S
--
+Fantassin()

+tailleSac() const: size_t
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S
+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2320</x>
      <y>680</y>
      <w>12</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2136</x>
      <y>776</y>
      <w>60</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2384</x>
      <y>712</y>
      <w>192</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>per::Heros
--
-m_sac: std::vector&lt;obj::IObjet_S&gt;
--
+Heros(pvMax: size_t)

+tailleSac() const: size_t
+ajouterObjet(objet: obj::IObjet_S): void
+retirerObjet(objet: obj::IObjet_S): void
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S
+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void

+actualiser(): void

+getPorte() const: hex::Masque
+getZoneDegat(cible: const hex::Coordonnees&amp;) const: hex::Masque
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2460</x>
      <y>680</y>
      <w>12</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2136</x>
      <y>800</y>
      <w>256</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>620.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2488</x>
      <y>500</y>
      <w>52</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum class&gt;&gt;
per::Deplacement
--
Marcher
Sauter
Forcer
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1580</x>
      <y>328</y>
      <w>212</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/donjon::IDonjon/
--
/+invoquer(personnage: per::APersonnage_S, /
/          position: const hex::Coordonnees&amp;): void/
/+deplace(personnage: per::APersonnage&amp;, type: per::Deplacement, /
/               position: const hex::Coordonnees&amp;): void/
/+pousse(aoe: const std::map&lt;hex::Coordonnees, hex::Direction&gt;&amp;, /
/         distance: size_t): void/
/+degat(aoe: const std::map&lt;hex::Coordonnees, size_t&gt;&amp;): void/
/+deposer(objet: obj::IObjet_S, position: const hex::Coordonnees&amp;): void/
/+ramasser(position: const hex::Coordonnees&amp;): obj::IObjet_S/

/+getCaseVide() const: std::vector&lt;hex::Coordonnees&gt;/
/+getNbPersonnages() const: size_t/
/+getPersonnage(indice: size_t) const: per::APersonnage_SC/
/+getPersonnage(indice: size_t): per::APersonnage_S/
/+getPersonnageParId(id: size_t) const: per::APersonnage_SC/
/+getPersonnageParId(id: size_t): per::APersonnage_S/
/+getCarte(): hex::ICarte_S&lt;cases::ICase_S&gt;/
/+trouver(position: const hex::Coordonnees&amp;) const: per::APersonnage_SC/
/+trouver(position: const hex::Coordonnees&amp;): per::APersonnage_S/
/+estOccupee(position: const hex::Coordonnees&amp;) const: bool/
style=autoresize
group=11</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1780</x>
      <y>296</y>
      <w>332</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>810.0;10.0;810.0;50.0;10.0;50.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1576</x>
      <y>488</y>
      <w>216</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>donjon::Donjon
--
m_personnages: std::vector&lt;per::APersonnage_S&gt;
m_carte: hex::ICarte_S&lt;cases::ACase_S&gt;
--
+invoquer(personnage: per::APersonnage_S,
          position: const hex::Coordonnees&amp;): void
+deplace(personnage: per::APersonnage&amp;, type: per::Deplacement,
               position: const hex::Coordonnees&amp;): void
+pousse(aoe: const std::map&lt;hex::Coordonnees, hex::Direction&gt;&amp;,
         distance: size_t): void
+degat(aoe: const std::map&lt;hex::Coordonnees, size_t&gt;&amp;): void
+deposer(objet: obj::IObjet_S, position: const hex::Coordonnees&amp;): void
+ramasser(position: const hex::Coordonnees&amp;): obj::IObjet_S

+getCaseVide() const: std::vector&lt;hex::Coordonnees&gt;
+getNbPersonnages() const: size_t
+getPersonnage(indice: size_t) const: per::APersonnage_SC
+getPersonnage(indice: size_t): per::APersonnage_S
+getPersonnageParId(id: size_t) const: per::APersonnage_SC
+getPersonnageParId(id: size_t): per::APersonnage_S
+getCarte(): hex::ICarte_S&lt;cases::ICase_S&gt;
+trouver(position: const hex::Coordonnees&amp;) const: per::APersonnage_SC
+trouver(position: const hex::Coordonnees&amp;): per::APersonnage_S
+estOccupee(position: const hex::Coordonnees&amp;) const: bool

+actualiser(): void

-pousse(personnage: const per::APersonnage_S&amp;, direction: hex::Direction,
        distance: size_t): void
style=autoresize
      
group=11</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1680</x>
      <y>460</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2584</x>
      <y>424</y>
      <w>152</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>/donjon::cases::ACase/
--
/+getObjet() const: const obj::IObjet&amp;/
/+estPraticable() const: bool/
/+estTransparent() const: bool/

/+deposer(objet: obj::IObjet_S): void/
/+ramasser(): obj::IObjet_S/
/+aObjet() const: bool/

/+enEntree(personnage: per::APersonnage&amp;): void/
/+enActivation(personnage: per::APersonnage&amp;): void/

/+accepter(visiteur: ICaseVisiteur&amp;) const: void/

+actualiser(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2508</x>
      <y>544</y>
      <w>152</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>donjon::cases::Sol
--
-m_objet: obj::IObjet_S
--
+Sol()

+getObjet() const: const obj::IObjet&amp;
+estPraticable() const: bool
+estTransparent() const: bool

+deposer(objet: obj::IObjet_S): void
+ramasser(): obj::IObjet_S
+aObjet() const: bool

+enEntree(personnage: per::APersonnage&amp;): void
+enActivation(personnage: per::APersonnage&amp;): void

+accepter(visiteur: ICaseVisiteur&amp;) const: void

+actualiser(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2600</x>
      <y>516</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2140</x>
      <y>296</y>
      <w>464</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;290.0;1140.0;290.0;1140.0;320.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2612</x>
      <y>380</y>
      <w>12</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2472</x>
      <y>380</y>
      <w>12</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;300.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1788</x>
      <y>504</y>
      <w>492</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;1210.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2664</x>
      <y>544</y>
      <w>152</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>donjon::cases::Trou
--
+Trou()

+getObjet() const: const obj::IObjet&amp;
+estPraticable() const: bool
+estTransparent() const: bool

+deposer(objet: obj::IObjet_S): void
+ramasser(): obj::IObjet_S
+aObjet() const: bool

+enEntree(personnage: per::APersonnage&amp;): void
+enActivation(personnage: per::APersonnage&amp;): void

+accepter(visiteur: ICaseVisiteur&amp;) const: void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2708</x>
      <y>516</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1276</x>
      <y>664</y>
      <w>176</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>partie::Equipe
--
-m_membres: std::vector&lt;per::APersonnage_S&gt;
-m_strategie: strat::IStrategie_S
--
+Equipe(strategie: strat::IStrategie_S&amp;)

+ajouterMembre(personnage: per::APersonnage_S): void
+retirerMembre(personnage: per::APersonnage_SC): void
+estMembre(idPersonnage: size_t) const: bool
+estMembre(personnage: const per::APersonnage&amp;) const: bool
+compterSurvivant() const: size_t
+jouer(partie: partie::Partie&amp;): void
+retirerMorts(): void

+compterMembres() const: size_t
+getMembre(indice: size_t) const: per::APersonnage_SC
+getMembre(indice: size_t): per::APersonnage_S
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1016</x>
      <y>636</y>
      <w>216</w>
      <h>172</h>
    </coordinates>
    <panel_attributes>partie::Partie
--
-m_equipes: std::vector&lt;Equipe&gt;
-m_donjon: donjon::IDonjon_S
-m_etat: etat::IEtat_S
-m_etatP: etat::IEtat_S
--
+Partie(strategie: strat::IStrategie_S&amp;)

+getEquipe(indice: size_t) const: const Equipe&amp;
+getEquipe(indice: size_t): Equipe&amp;
+getEquipes(): std::vector&lt;Equipe&gt;&amp;
+getDonjon() const: donjon::IDonjon_SC
+getDonjon(): donjon::IDonjon_S
+getEtat() const: etat::IEtat_SC
+setEtat(etat: etat::IEtat_S): void
+getEtatPre() const: etat::IEtat_SC
+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+genererEquipe(strategie: strat::IStrategie_S&amp;): size_t
+genererPersonnage(personnage: per::APersonnage_S, indice: size_t): void
+genererObjet(objet: obj::IObjet_S): void
+demander(): void
+demander(indiceObjet: size_t): void
+demander(coordonnees: hex::Coordonnees): void
+coordonneesLibre(): hex::Coordonnees

-genererCarte(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1492</x>
      <y>672</y>
      <w>212</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/partie::strat::IStrategie/
--
/+mettreEnOeuvre(partie: partie::Partie&amp;, equipe: partie::Equipe&amp;): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1492</x>
      <y>716</y>
      <w>212</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>partie::strat::JoueurHumain
--
+JoueurHumain()

+mettreEnOeuvre(partie: partie::Partie&amp;, equipe: partie::Equipe&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1596</x>
      <y>696</y>
      <w>12</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1276</x>
      <y>776</y>
      <w>212</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/partie::etat::IEtat/
--
/+getEquipeCourante() const: size_t/
/+getPersoSelect() const: per::APersonnage_SC/
/+getObjetSelect() const: obj::IObjet_SC/

/+afficher() const: void/

/+operation(partie: Partie&amp;): void/
/+operation(partie: Partie&amp;, indiceObjet: size_t): void/
/+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1228</x>
      <y>664</y>
      <w>56</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1448</x>
      <y>676</y>
      <w>52</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1228</x>
      <y>780</y>
      <w>56</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..2
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1080</x>
      <y>864</y>
      <w>212</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>partie::etat::Decision
--
-m_indiceEquipe: size_t
--
+Decision(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1272</x>
      <y>844</y>
      <w>20</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1472</x>
      <y>864</y>
      <w>212</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>partie::etat::FinPartie
--
-m_indiceGagnant: size_t
--
+Decision(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1460</x>
      <y>844</y>
      <w>36</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1456</x>
      <y>956</y>
      <w>212</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>partie::etat::FinTour
--
-m_indiceEquipe: size_t
--
+FinTour(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1436</x>
      <y>844</y>
      <w>36</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;280.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1124</x>
      <y>1048</y>
      <w>212</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>partie::etat::SelectionMan
--
-m_indiceEquipe: size_t
--
+SelectionMan(indiceEquipe: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1280</x>
      <y>1152</y>
      <w>212</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>partie::etat::ObjetActif
--
-m_equipe: size_t
-m_personnage: per::APersonnage_S
-m_objet: obj::IObjet_S
--
+ObjetActif(equipe: size_t, personnage: per::APersonnage_S,
            objet: obj::IObjet_S)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1436</x>
      <y>1048</y>
      <w>212</w>
      <h>92</h>
    </coordinates>
    <panel_attributes>partie::etat::PersoActif
--
-m_indiceEquipe: size_t
-m_personnage: per::APersonnage_S
--
+PersoActif(indice: size_t, personnage: per::APersonnage_S)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1100</x>
      <y>956</y>
      <w>212</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>partie::etat::SelectionAuto
--
-m_equipe: size_t
--
+SelectionAuto(indice: size_t)

+getEquipeCourante() const: size_t
+getPersoSelect() const: per::APersonnage_SC
+getObjetSelect() const: obj::IObjet_SC

+afficher() const: void

+operation(partie: Partie&amp;): void
+operation(partie: Partie&amp;, indiceObjet: size_t): void
+operation(partie: Partie&amp;, coordonnees: const hex::Coordonnees&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>320</x>
      <y>0</y>
      <w>192</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
controlleur::IControlleur
--
/+enEvenement(source: const vue::Fenetre&amp;, even: sf::Event&amp;): void/
style=autoresize
group=14</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>316</x>
      <y>52</y>
      <w>244</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>controlleur::PartieCont
--
-m_dessinable: const vue::PartieDessinable*
-m_partie: partie::Partie*
-m_convertisseur: utils::HexPixelConvertisseur
--
+PartieCont(dessinable: const vue::PartieDessinable&amp;, partie: partie::Partie&amp;)

+enEvenement(source: const vue::Fenetre&amp;, even: sf::Event&amp;): void
#clicObjet(coordonneesClic: const sf::Vector2f&amp;): bool
#clicCase(coordonneesClic: const sf::Vector2f&amp;, source: const vue::Fenetre&amp;): void
style=autoresize
group=14</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>436</x>
      <y>24</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1236</x>
      <y>108</y>
      <w>116</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>vue::ADessinable&lt;T&gt;
--
-m_cote: float
-m_element: T*
--
+ADessinable(cote: float)
+ADessinable(cote: float, element: T&amp;)

+getCote() const: float
+getElement(): T*
+getElement() const: const T*

+setCote(cote: float): void
+setElement(element: T&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1236</x>
      <y>76</y>
      <w>40</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>/sf::Drawable/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1296</x>
      <y>76</y>
      <w>56</w>
      <h>12</h>
    </coordinates>
    <panel_attributes>/sf::Transformable/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1252</x>
      <y>84</y>
      <w>12</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1320</x>
      <y>84</y>
      <w>12</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1136</x>
      <y>324</y>
      <w>204</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>vue::CaseDessinable
--
-m_case: donjon::cases::ACase*
-m_hexagone: sf::CircleShape
-m_textureSol: Texture_S
-m_textureTrou: Texture_S
-m_objDessinable: ObjetDessinable
--
+ADessinable(cote: float)
+ADessinable(cote: float, element: donjon::cases::ACase&amp;)

+surligner(): void

+visiter(gravityGun: const obj::GravityGun&amp;): void
+visiter(taser: const obj::Taser&amp;): void

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void

+setCote(cote: float): void
+setElement(element: donjon::cases::ACase&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1364</x>
      <y>212</y>
      <w>152</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/obj::IObjetVisiteur/
--
/+visiter(gravityGun: const obj::GravityGun&amp;): void/
/+visiter(taser: const obj::Taser&amp;): void/
group=1
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1204</x>
      <y>300</y>
      <w>12</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1324</x>
      <y>184</y>
      <w>12</w>
      <h>148</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;350.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1200</x>
      <y>272</y>
      <w>100</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/donjon::cases::ICaseVisiteur/
--
/+visite(sol: const Sol&amp;): void/
/+visite(trou: const Trou&amp;): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1364</x>
      <y>260</y>
      <w>204</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>vue::ObjetDessinable
--
-m_cote: float
-m_objet: const obj::IObjet*
-m_sprite: sf::Sprite
-m_textureGravityGun: Texture_S
-m_textureTaser: Texture_S
--
+ObjetDessinable(cote; float, iObjet: const obj::IObjet*)

+getCote() const: float
+getObjet() const: const obj::IObjet*

+setCote(cote: float): void
+setObjet(iobjet: const obj::IObjet&amp;): void

+surligner(): void

+visiter(gravityGun: const obj::GravityGun&amp;): void
+visiter(taser: const obj::Taser&amp;): void

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void
group=1
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1328</x>
      <y>84</y>
      <w>240</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;580.0;440.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1264</x>
      <y>84</y>
      <w>292</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;710.0;440.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1380</x>
      <y>240</y>
      <w>12</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>588</x>
      <y>264</y>
      <w>240</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>vue::PartieDessinable
--
-m_convertisseur: utils::HexPixelConvertisseur
-m_font: sf::Font
-m_equipeText: sf::Text
-m_equipeIndicateur: sf::RectangleShape
--
+PartieDessinable(cote: float)
+PartieDessinable(cote: float, partie: partie::Partie&amp;)

+getCote() const: float
+getObjet() const: const obj::IObjet*

+setCote(cote: float): void
+setElement(element: partie::Partie&amp;): void

+getCaseInventaire(indice: size_t) const: sf::FloatRect

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void

-drawCarte(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;,
           donjon: donjon::IDonjon&amp;) const: void
-drawPersonnages(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;,
                 donjon: donjon::IDonjon&amp;) const: void
-drawEquipe(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;) const: void
-drawInventaire(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;) const: void
-drawGagnant(target: sf::RenderTarget&amp;, target: sf::RenderStates&amp;) const: void
-couleurEquipe(equipe: size_t) const: sf::Color
-depuisHSV(hue: int, saturation: float, value: float) const: sf::Color
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>816</x>
      <y>184</y>
      <w>436</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>1070.0;10.0;1070.0;60.0;10.0;60.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>928</x>
      <y>124</y>
      <w>176</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>vue::TextureGest
--
-m_textures: std::map&lt;std::string, Texture_S&gt;
--
_+getInstance(): TextureGest&amp;_

-TextureGest()
+TextureGest(const TextureGest&amp; autre) {delete}
+operator=(const TextureGest&amp; autre): TextureGest&amp; [delete]

+obtenir(chemin: const std::string&amp;): Texture_S
+retirer(chemin: const std::string&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>928</x>
      <y>0</y>
      <w>248</w>
      <h>116</h>
    </coordinates>
    <panel_attributes>vue::Fenetre
--
-m_fenetre: sf::RenderWindow
-m_gestEven: std::map&lt;sf::Event::EventType, std::list&lt;controlleur::IControlleur_S&gt; &gt;
-m_dessinable: std::shared_ptr&lt;sf::Drawable&gt;
--
+Fenetre(videoMode: sf::VideoMode&amp;, titre: std::string)

+getRenderWindow(): sf::RenderWindow&amp;
+getRenderWindow() const: const sf::RenderWindow&amp;

+actualiser(): void
+actualiserUneFois(): void

+attacher(type: sf::Event::EventType, evenGest: controlleur::IControlleur_S): void
+detacher(type: sf::Event::EventType, evenGest: controlleur::IControlleur_S): void

+setDessinateur(dessinateur: std::shared_ptr&lt;sf::Drawable&gt;): void

#notifier(even: sf::Event&amp;): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>856</x>
      <y>272</y>
      <w>132</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/per::IPersonnageVisiteur/
--
/+visiter(heros: const Heros&amp;): void/
/+visiter(fantassin: const Fantassin&amp;): void/
style=autoresize
group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>856</x>
      <y>328</y>
      <w>204</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>vue::PersonnageDessinable
--
-m_margin: float
-m_couleur: sf::Color
-m_sprite: sf::Sprite
-m_barFond: sf::RectangleShape
-m_barValeur: sf::RectangleShape
-m_herosTex: Texture_S
-m_fantassinTex: Texture_S
--
+PersonnageDessinable(cote: float);
+PersonnageDessinable(cote: float, aPersonnage: per::APersonnage&amp;)
+PersonnageDessinable(autre: const PersonnageDessinable&amp;)
+operator=(autre: const PersonnageDessinable&amp;): PersonnageDessinable&amp;
+~PersonnageDessinable()

+getCouleur() const: sf::Color
+setCouleur(couleur: const sf::Color&amp;): void

+setCote(cote: float): void
+setElement(aPersonnage: per::APersonnage&amp;): void

+draw(sf::RenderTarget&amp; target, sf::RenderStates states) const: void

+visiter(heros: const Heros&amp;): void
+visiter(fantassin: const Fantassin&amp;): void
+actualiser(info: const per::APersonnage&amp;): void

-preparerBarreSante(personnage: const per::APersonnage&amp;)
style=autoresize
group=3</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1008</x>
      <y>184</y>
      <w>252</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>610.0;10.0;610.0;100.0;10.0;100.0;10.0;360.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>908</x>
      <y>300</y>
      <w>12</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>100</x>
      <y>232</y>
      <w>176</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>Roblite
--
-m_partie: std::shared_ptr&lt;partie::Partie&gt;
-m_fenetre: std::shared_ptr&lt;vue::Fenetre&gt;
-m_partieDessinable: std::shared_ptr&lt;vue::PartieDessinable&gt;
-m_controlleur: controlleur::IControlleur_S
--
+Roblite()

+jouer(): void
+preparerPartie(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1172</x>
      <y>80</y>
      <w>72</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>508</x>
      <y>4</y>
      <w>428</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=*</panel_attributes>
    <additional_attributes>1050.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>272</x>
      <y>104</y>
      <w>664</w>
      <h>164</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;380.0;1270.0;380.0;1270.0;10.0;1640.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1048</x>
      <y>264</y>
      <w>100</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/utils::IObservateur&lt;T&gt;/
--
/+actualiser(const T&amp; info): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1048</x>
      <y>288</y>
      <w>12</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1136</x>
      <y>288</y>
      <w>12</w>
      <h>44</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1788</x>
      <y>532</y>
      <w>116</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2124</x>
      <y>296</y>
      <w>264</w>
      <h>212</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;310.0;640.0;310.0;640.0;510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2480</x>
      <y>672</y>
      <w>132</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;300.0;10.0;300.0;480.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2244</x>
      <y>940</y>
      <w>92</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;200.0;10.0;200.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2480</x>
      <y>664</y>
      <w>160</w>
      <h>344</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;370.0;10.0;370.0;840.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>620</x>
      <y>52</y>
      <w>224</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>utils::HexPixelConvertisseur
--
+HexPixelConvertisseur()

+operator()(cote: float, hex: const hex::Coordonnees&amp;) const: sf::Vector2f
+operator()(cote: float, pixel: const sf::Vector2i&amp;) const: hex::Coordonnees
style=autoresize
group=14</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>556</x>
      <y>56</y>
      <w>72</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1672</x>
      <y>752</y>
      <w>164</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>hex::IterateurCarteHexagone&lt;T&gt;
--
-m_carte: const CarteHexagone&lt;T&gt;*
-m_colonne: int
-m_ligne: int
-m_colonneMax: int
--
+IterateurCarteHexagone(carte: const CarteHexagone&lt;T&gt;*)
+aSuite(): bool
+suite(): Coordonnees
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1760</x>
      <y>684</y>
      <w>68</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/hex::IIterateur&lt;T&gt;/
--
/+aSuite(): bool/
/+suite(): Coordonnees/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1792</x>
      <y>712</y>
      <w>12</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1316</x>
      <y>844</y>
      <w>44</w>
      <h>212</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>90.0;10.0;10.0;510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1408</x>
      <y>844</y>
      <w>44</w>
      <h>212</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;510.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1376</x>
      <y>844</y>
      <w>12</w>
      <h>316</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;770.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1296</x>
      <y>844</y>
      <w>36</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;280.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1228</x>
      <y>640</y>
      <w>356</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1..*
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;870.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>272</x>
      <y>264</y>
      <w>324</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;790.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>272</x>
      <y>276</y>
      <w>752</w>
      <h>392</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0;60.0;950.0;1860.0;950.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>272</x>
      <y>52</y>
      <w>52</w>
      <h>204</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;480.0;60.0;480.0;70.0;10.0;110.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1564</x>
      <y>264</y>
      <w>76</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;170.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1632</x>
      <y>260</y>
      <w>220</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/obj::IObjet/
--
/+estUtilisable() const: bool/
/+void utiliser(donjon: donjon::IDonjon&amp;, origine: const hex::Coordonnees&amp;, /
/              cible: const hex::Coordonnees&amp;)/

/+accepter(visiteur: IObjetVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1388</x>
      <y>420</y>
      <w>152</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>/donjon::cases::ACase/
--
/+getObjet() const: const obj::IObjet&amp;/
/+estPraticable() const: bool/
/+estTransparent() const: bool/

/+deposer(objet: obj::IObjet_S): void/
/+ramasser(): obj::IObjet_S/
/+aObjet() const: bool/

/+enEntree(personnage: per::APersonnage&amp;): void/
/+enActivation(personnage: per::APersonnage&amp;): void/

/+accepter(visiteur: ICaseVisiteur&amp;) const: void/

+actualiser(): void
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1336</x>
      <y>420</y>
      <w>60</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1108</x>
      <y>444</y>
      <w>212</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>/per::APersonnage/
--
_#idSuivante: size_t_

#m_pv: utils::Jauge
#m_position: hex::Coordonnees
#m_id: size_t const
#m_zoneEffet: std::map&lt;hex::Coordonnees, size_t&gt;
--
+APersonnage(pvMax: size_t, position: hex::Coordonnees)

+getSante() const: size_t
+getSanteMax() const: size_t
+getId() const: size_t
+getPosition() const: hex::Coordonnees
+getZoneEffet() const: std::map&lt;hex::Coordonnees, size_t&gt;

+estVivant() const: bool
+subirAttaque(degat: size_t): void
+ajouterSante(sante: int): void
+ajouterSanteMax(sante: int): void
+tuer(): void

+deplacer(deplacement: per::Deplacement, cible: hex::Coordonnees): void

+ajouterObjet(objet: obj::IObjet_S): void
+retirerObjet(objet: obj::IObjet_S): void
+tailleSac() const: size_t
+getObjet(size_t indice) const: obj::IObjet_SC
+getObjet(size_t indice): obj::IObjet_S

/+accepter(visiteur: per::IPersonnageVisiteur&amp;) const: void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1056</x>
      <y>448</y>
      <w>60</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;130.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>824</x>
      <y>416</y>
      <w>200</w>
      <h>236</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;60.0;10.0;60.0;560.0;480.0;560.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2680</x>
      <y>332</y>
      <w>100</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>&lt;&lt;Interface&gt;&gt;
/utils::IObservateur&lt;T&gt;/
--
/+actualiser(const T&amp; info): void/
style=autoresize</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2624</x>
      <y>336</y>
      <w>64</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;140.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>556</x>
      <y>104</y>
      <w>468</w>
      <h>556</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0;40.0;1350.0;1150.0;1360.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2136</x>
      <y>644</y>
      <w>548</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>1310.0;10.0;1350.0;10.0;1350.0;430.0;10.0;430.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1832</x>
      <y>752</y>
      <w>56</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=*</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1448</x>
      <y>512</y>
      <w>832</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=*
m2=1</panel_attributes>
    <additional_attributes>10.0;390.0;980.0;390.0;980.0;10.0;2060.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1644</x>
      <y>520</y>
      <w>636</w>
      <h>544</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;1330.0;160.0;1330.0;160.0;730.0;500.0;730.0;500.0;620.0;1160.0;620.0;1160.0;10.0;1570.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1488</x>
      <y>528</y>
      <w>792</w>
      <h>644</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;1580.0;560.0;1580.0;560.0;720.0;900.0;720.0;900.0;610.0;1560.0;610.0;1560.0;10.0;1960.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1488</x>
      <y>776</y>
      <w>440</w>
      <h>404</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;980.0;580.0;980.0;580.0;120.0;920.0;120.0;920.0;10.0;1080.0;10.0</additional_attributes>
  </element>
</diagram>
